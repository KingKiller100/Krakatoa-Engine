#include "pch.hpp"
#include "MathsExceptions.hpp"

#include "../../Format/kFormatToString.hpp"

namespace klib::kDebug
{
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Mathematical Exception Base ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	MathsError::MathsError()
		: logic_error("Maths Error Occur")
	{
	}

	MathsError::MathsError(const char* const _Message)
		: logic_error(_Message)
	{
	}

	MathsError::MathsError(const std::string& _Message)
		: logic_error(_Message)
	{
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Division By Zero Exception ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	DivByZeroError::DivByZeroError()
		: MathsError("ERROR: Division by zero has occured!")
	{}

	DivByZeroError::DivByZeroError(const std::string& _Message)
		: MathsError(_Message)
	{}

	DivByZeroError::DivByZeroError(const char* const _Message)
		: MathsError(_Message)
	{}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// No Real Root Exception ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	NoRealRootError::NoRealRootError(const long double value)
		: MathsError(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}
	
	NoRealRootError::NoRealRootError(const double value)
		: MathsError(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}

	NoRealRootError::NoRealRootError(const float value)
		: MathsError(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}

	NoRealRootError::NoRealRootError(const kmaths::Big_Int_Type value)
		: MathsError(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}

	NoRealRootError::NoRealRootError(const std::string& _Message)
		: MathsError(_Message)
	{}

	NoRealRootError::NoRealRootError(const char* const _Message)
		: MathsError(_Message)
	{}

	NoRealRootError::~NoRealRootError() noexcept
		= default;

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Maths Logic Exception //////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	MathsLogicError::MathsLogicError(const std::string& _Message)
		: MathsError(_Message)
	{}

	MathsLogicError::MathsLogicError(const char* const _Message)
		: MathsError(_Message)
	{}

	MathsLogicError::~MathsLogicError() noexcept
		= default;
}
