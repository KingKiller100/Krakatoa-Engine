#include "pch.hpp"
#include "MathsExceptions.hpp"

#include "../../Format/kFormatToString.hpp"

namespace klib::kDebug::errors
{
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Division By Zero Exception ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	DivByZero::DivByZero()
		: logic_error("ERROR: Division by zero has occured!")
	{}

	DivByZero::DivByZero(const std::string& _Message)
		: logic_error(_Message)
	{}

	DivByZero::DivByZero(const char* const _Message)
		: logic_error(_Message)
	{}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// No Real Root Exception ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	NoRealRoot::NoRealRoot(const long double value)
		: logic_error(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}
	
	NoRealRoot::NoRealRoot(const double value)
		: logic_error(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}

	NoRealRoot::NoRealRoot(const float value)
		: logic_error(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}

	NoRealRoot::NoRealRoot(const kmaths::Big_Int_Type value)
		: logic_error(kFormat::ToString("ERROR: No real root has occured for value \"{0}\"", value))
	{}

	NoRealRoot::NoRealRoot(const std::string& _Message)
		: logic_error(_Message)
	{}

	NoRealRoot::NoRealRoot(const char* const _Message)
		: logic_error(_Message)
	{}

	NoRealRoot::~NoRealRoot() noexcept
		= default;

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Breaks Maths Logic Exception //////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	BreaksMathsLogic::BreaksMathsLogic(const std::string& _Message)
		: logic_error(_Message)
	{}

	BreaksMathsLogic::BreaksMathsLogic(const char* const _Message)
		: logic_error(_Message)
	{}

	BreaksMathsLogic::~BreaksMathsLogic() noexcept
		= default;
}
